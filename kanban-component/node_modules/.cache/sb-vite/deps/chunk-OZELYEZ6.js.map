{
  "version": 3,
  "sources": ["../../../markdown-to-jsx/index.tsx"],
  "sourcesContent": ["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** @deprecated merged into linkAngleBraceStyleDetector\n   *\n   * emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nif (process.env.NODE_ENV === 'test') {\n  Object.keys(RuleType).forEach(key => (RuleType[key] = key))\n}\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst Priority = {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX: 0,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH: 1,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED: 2,\n  /**\n   * inline elements\n   */\n  LOW: 3,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN: 4,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script', 'pre']\nconst ATTRIBUTES_TO_SANITIZE = [\n  'src',\n  'href',\n  'data',\n  'formAction',\n  'srcDoc',\n  'action',\n]\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:([-*_])( *\\1){2,}) *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)((?:\\\\`|(?!\\1)`|[^`])+)\\1/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-)\\2{2,} *\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_R = /^<([^ >]+[:@\\/][^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * Ensure there's at least one more instance of the delimiter later\n * in the current sequence.\n */\nconst LOOKAHEAD = (double: number) => `(?=[\\\\s\\\\S]+?\\\\1${double ? '\\\\1' : ''})`\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(\n  `^([*_])\\\\1${LOOKAHEAD(1)}${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`\n)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(\n  `^([*_])${LOOKAHEAD(0)}${INLINE_SKIP_R}\\\\1(?!\\\\1)`\n)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^(==)${LOOKAHEAD(0)}${INLINE_SKIP_R}\\\\1`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(\n  `^(~~)${LOOKAHEAD(0)}${INLINE_SKIP_R}\\\\1`\n)\n\n/**\n * Special case for shortcodes like :big-smile: or :emoji:\n */\nconst SHORTCODE_R = /^(:[a-zA-Z0-9-_]+:)/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst UNESCAPE_R = /\\\\([^0-9A-Za-z\\s])/g\n\n/**\n * Always take the first character, then eagerly take text until a double space\n * (potential line break) or some markdown-like punctuation is reached.\n */\nconst TEXT_PLAIN_R = /^[\\s\\S](?:(?!  \\n|[0-9]\\.|http)[^=*_~\\-\\n:<`\\\\\\[!])*/\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _qualify: source => LIST_ITEM_PREFIX_R.test(source),\n    _match: allowInline(function (source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListAllowed = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListAllowed) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    }),\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for delta afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = trimEnd(content) + '\\n\\n'\n        } else {\n          state.inline = true\n          adjustedContent = trimEnd(content)\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    _render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE =\n  '(?:\\\\[[^\\\\[\\\\]]*(?:\\\\[[^\\\\[\\\\]]*\\\\][^\\\\[\\\\]]*)*\\\\]|[^\\\\[\\\\]])*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nfunction isString(value: any): value is string {\n  return typeof value === 'string'\n}\n\nfunction trimEnd(str: string) {\n  let end = str.length\n  while (end > 0 && str[end - 1] <= ' ') end--\n  return str.slice(0, end)\n}\n\nfunction startsWith(str: string, prefix: string) {\n  return str.startsWith(prefix)\n}\n\nfunction qualifies(\n  source: string,\n  state: MarkdownToJSX.State,\n  qualify: MarkdownToJSX.Rule<any>['_qualify']\n) {\n  if (Array.isArray(qualify)) {\n    for (let i = 0; i < qualify.length; i++) {\n      if (startsWith(source, qualify[i])) return true\n    }\n\n    return false\n  }\n\n  return qualify(source, state)\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n\n  state.inTable = true\n\n  let cells: MarkdownToJSX.ParserResult[][] = [[]]\n  let acc = ''\n\n  function flush() {\n    if (!acc) return\n\n    const cell = cells[cells.length - 1]\n    cell.push.apply(cell, parse(acc, state))\n    acc = ''\n  }\n\n  source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/(`[^`]*`|\\\\\\||\\|)/)\n    .filter(Boolean)\n    .forEach((fragment, i, arr) => {\n      if (fragment.trim() === '|') {\n        flush()\n\n        if (tableOutput) {\n          if (i !== 0 && i !== arr.length - 1) {\n            // Split the current row\n            cells.push([])\n          }\n\n          return\n        }\n      }\n\n      acc += fragment\n    })\n\n  flush()\n\n  state.inTable = prevInTable\n\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\ntype StyleTuple = [key: string, value: string]\n\nfunction parseStyleAttribute(styleString: string): StyleTuple[] {\n  const styles: StyleTuple[] = []\n  let buffer = ''\n  let inUrl = false\n  let inQuotes = false\n  let quoteChar: '\"' | \"'\" | '' = ''\n\n  if (!styleString) return styles\n\n  for (let i = 0; i < styleString.length; i++) {\n    const char = styleString[i]\n\n    // Handle quotes\n    if ((char === '\"' || char === \"'\") && !inUrl) {\n      if (!inQuotes) {\n        inQuotes = true\n        quoteChar = char\n      } else if (char === quoteChar) {\n        inQuotes = false\n        quoteChar = ''\n      }\n    }\n\n    // Track url() values\n    if (char === '(' && buffer.endsWith('url')) {\n      inUrl = true\n    } else if (char === ')' && inUrl) {\n      inUrl = false\n    }\n\n    // Only split on semicolons when not in quotes or url()\n    if (char === ';' && !inQuotes && !inUrl) {\n      const declaration = buffer.trim()\n      if (declaration) {\n        const colonIndex = declaration.indexOf(':')\n        if (colonIndex > 0) {\n          const key = declaration.slice(0, colonIndex).trim()\n          const value = declaration.slice(colonIndex + 1).trim()\n          styles.push([key, value])\n        }\n      }\n      buffer = ''\n    } else {\n      buffer += char\n    }\n  }\n\n  // Handle the last declaration\n  const declaration = buffer.trim()\n  if (declaration) {\n    const colonIndex = declaration.indexOf(':')\n    if (colonIndex > 0) {\n      const key = declaration.slice(0, colonIndex).trim()\n      const value = declaration.slice(colonIndex + 1).trim()\n      styles.push([key, value])\n    }\n  }\n\n  return styles\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return parseStyleAttribute(value).reduce(function (styles, [key, value]) {\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = sanitizeUrlFn(value, tag, key)\n\n      return styles\n    }, {})\n  } else if (ATTRIBUTES_TO_SANITIZE.indexOf(key) !== -1) {\n    return sanitizeUrlFn(unescape(value), tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = unescape(value.slice(1, value.length - 1))\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  var ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      const order = rules[type]._order\n      if (typeof order !== 'number' || !isFinite(order)) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  ruleList.sort(function (a, b) {\n    return rules[a]._order - rules[b]._order || (a < b ? -1 : 1)\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    var result = []\n    state.prevCapture = state.prevCapture || ''\n\n    if (source.trim()) {\n      while (source) {\n        var i = 0\n        while (i < ruleList.length) {\n          var ruleType = ruleList[i]\n          var rule = rules[ruleType]\n\n          if (rule._qualify && !qualifies(source, state, rule._qualify)) {\n            i++\n            continue\n          }\n\n          var capture = rule._match(source, state)\n          if (capture && capture[0]) {\n            source = source.substring(capture[0].length)\n\n            var parsed = rule._parse(capture, nestedParse, state)\n\n            state.prevCapture += capture[0]\n\n            if (!parsed.type) parsed.type = ruleType as unknown as RuleType\n            result.push(parsed)\n            break\n          }\n          i++\n        }\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function (source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n/**\n * Marks a matcher function as eligible for being run inside an inline context;\n * allows us to do a little less work in the nested parser.\n */\nfunction allowInline<T extends Function & { inline?: 0 | 1 }>(fn: T) {\n  fn.inline = 1\n\n  return fn\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return allowInline(function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return allowInline(function match(\n    source: string,\n    state: MarkdownToJSX.State\n  ) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return allowInline(function match(source: string /*, state*/) {\n    return regex.exec(source)\n  })\n}\n\nconst SANITIZE_R = /(javascript|vbscript|data(?!:image)):/i\n\nexport function sanitizer(input: string): string {\n  try {\n    const decoded = decodeURIComponent(input).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (SANITIZE_R.test(decoded)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Input contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Input could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        input\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return input\n}\n\nfunction unescape(rawString: string): string {\n  return rawString ? rawString.replace(UNESCAPE_R, '$1') : rawString\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[2], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactNode {\n    const renderer = rules[ast.type]._render as MarkdownToJSX.Rule['_render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactNode[] | React.ReactNode {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const _isString = isString(nodeOut)\n\n        if (_isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = _isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return renderRule(ast, patchedRender, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options & {\n    wrapper: null\n  }\n): React.ReactNode[]\nexport function compiler(\n  markdown: string,\n  options?: MarkdownToJSX.Options\n): React.JSX.Element\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n): React.JSX.Element | React.ReactNode[] {\n  options.overrides = options.overrides || {}\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const slug = options.slugify || slugify\n  const sanitize = options.sanitizer || sanitizer\n  const createElement = options.createElement || React.createElement\n\n  const NON_PARAGRAPH_BLOCK_SYNTAXES = [\n    BLOCKQUOTE_R,\n    CODE_BLOCK_FENCED_R,\n    CODE_BLOCK_R,\n    options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R,\n    HEADING_SETEXT_R,\n    NP_TABLE_R,\n    ORDERED_LIST_R,\n    UNORDERED_LIST_R,\n  ]\n\n  const BLOCK_SYNTAXES = [\n    ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n    PARAGRAPH_R,\n    HTML_BLOCK_ELEMENT_R,\n    HTML_COMMENT_R,\n    HTML_SELF_CLOSING_ELEMENT_R,\n  ]\n\n  function some(regexes: RegExp[], input: string) {\n    for (let i = 0; i < regexes.length; i++) {\n      if (regexes[i].test(input)) {\n        return true\n      }\n    }\n    return false\n  }\n\n  function containsBlockSyntax(input: string) {\n    return some(BLOCK_SYNTAXES, input)\n  }\n\n  function matchParagraph(source: string, state: MarkdownToJSX.State) {\n    if (\n      state.inline ||\n      state.simple ||\n      (state.inHTML &&\n        source.indexOf('\\n\\n') === -1 &&\n        state.prevCapture.indexOf('\\n\\n') === -1)\n    ) {\n      return null\n    }\n\n    let match = ''\n    let start = 0\n\n    while (true) {\n      const newlineIndex = source.indexOf('\\n', start)\n\n      // Extract the line including the newline\n      const line = source.slice(\n        start,\n        newlineIndex === -1 ? undefined : newlineIndex + 1\n      )\n      if (some(NON_PARAGRAPH_BLOCK_SYNTAXES, line)) {\n        break\n      }\n\n      match += line\n\n      // Stop if line has no content (empty line)\n      if (newlineIndex === -1 || !line.trim()) {\n        break\n      }\n\n      start = newlineIndex + 1\n    }\n\n    const captured = trimEnd(match)\n    if (captured === '') {\n      return null\n    }\n\n    // parseCaptureInline expects the inner content to be at index 2\n    // because index 1 is the delimiter for text formatting syntaxes\n    return [match, , captured] as RegExpMatchArray\n  }\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element | React.ReactNode[] {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${trimEnd(input).replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    ) as React.ReactNode[]\n\n    while (\n      isString(arr[arr.length - 1]) &&\n      !(arr[arr.length - 1] as string).trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return createElement(wrapper, { key: 'outer' }, jsx) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    if (!str || !str.trim()) {\n      return null\n    }\n\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          sanitize\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      _qualify: ['>'],\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      _render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' + slug(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      _qualify: ['  '],\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      _qualify: ['--', '__', '**', '- ', '* ', '_ '],\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      _qualify: ['    '],\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: unescape(trimEnd(capture[0].replace(/^ {4}/gm, ''))),\n        }\n      },\n\n      _render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      _qualify: ['```', '~~~'],\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      _qualify: ['`'],\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: unescape(capture[2]),\n        }\n      },\n      _render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      _qualify: ['[^'],\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      _qualify: ['[^'],\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          target: `#${slug(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitize(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      _qualify: ['[ ]', '[x]'],\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      _qualify: ['#'],\n      _match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: slug(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      _render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      _qualify: source => {\n        const nlIndex = source.indexOf('\\n')\n        return (\n          nlIndex > 0 &&\n          nlIndex < source.length - 1 &&\n          (source[nlIndex + 1] === '=' || source[nlIndex + 1] === '-')\n        )\n      },\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          const prevInHTML = state.inHTML\n          state.inHTML = true\n          ast.children = parseFunc(parse, trimmed, state)\n          state.inHTML = prevInHTML\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      _render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      _render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      _qualify: ['<!--'],\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: unescape(capture[1]),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitize(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      _qualify: ['['],\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={sanitize(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      _qualify: ['<'],\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let target = capture[1]\n        let isEmail = false\n\n        if (\n          target.indexOf('@') !== -1 &&\n          // emails don't have protocols in them\n          target.indexOf('//') === -1\n        ) {\n          isEmail = true\n          target = target.replace('mailto:', '')\n        }\n\n        return {\n          children: [\n            {\n              text: target,\n              type: RuleType.text,\n            },\n          ],\n          target: isEmail ? 'mailto:' + target : target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      _qualify: (source, state) => {\n        if (state.inAnchor || options.disableAutoLink) return false\n        return startsWith(source, 'http://') || startsWith(source, 'https://')\n      },\n      _match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      _qualify: ['\\n'],\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      _match: allowInline(matchParagraph),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      _qualify: ['['],\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] ? unescape(capture[1]) : undefined,\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitize(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      _qualify: source => source[0] === '[' && source.indexOf('](') === -1,\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitize(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      _qualify: ['|'],\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: allowInline(function (source, state) {\n        let ret\n        if (startsWith(source, ':')) ret = SHORTCODE_R.exec(source)\n        if (ret) return ret\n\n        return TEXT_PLAIN_R.exec(source)\n      }),\n      _order: Priority.MIN,\n      _parse(capture) {\n        const text = capture[0]\n        return {\n          text:\n            text.indexOf('&') === -1\n              ? text\n              : text.replace(\n                  HTML_CHAR_CODE_R,\n                  (full, inner) => options.namedCodesToUnicode[inner] || full\n                ),\n        }\n      },\n      _render(node) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      _qualify: ['**', '__'],\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      _qualify: source => {\n        const char = source[0]\n        return (char === '*' || char === '_') && source[1] !== char\n      },\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      _qualify: ['\\\\'],\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      _qualify: ['=='],\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      _qualify: ['~~'],\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  const isDebug = !!process.env.DEBUG && process.env.DEBUG !== '0'\n\n  let invocationCounts, ruleNames: { [key: string]: string }\n\n  if (isDebug) {\n    // Initialize invocation counters for debugging\n    invocationCounts = {\n      match: { total: 0, attempts: 0 },\n      parse: { total: 0 },\n    }\n\n    // Create a reverse mapping from numeric keys to rule names for better debugging output\n    ruleNames = {}\n    Object.keys(RuleType).forEach(ruleKey => {\n      ruleNames[RuleType[ruleKey as keyof typeof RuleType]] = ruleKey\n    })\n\n    Object.keys(rules).forEach(key => {\n      let { _match: match, _parse: parse } = rules[key]\n\n      // Initialize per-rule counters: [matches, attempts, max]\n      invocationCounts.match[key] = [0, 0, 0]\n      // [exections, cost, max]\n      invocationCounts.parse[key] = [0, 0, 0]\n\n      rules[key]._match = (...args) => {\n        // Track attempts for miss ratio calculation\n        invocationCounts.match.attempts++\n        invocationCounts.match[key][1]++ // attempts for this rule\n\n        const start = performance.now()\n        const result = match(...args)\n        const delta = performance.now() - start\n\n        invocationCounts.match[key][2] = Math.max(\n          Number(invocationCounts.match[key][2]) || 0,\n          delta\n        )\n\n        if (result) {\n          // Successful match\n          invocationCounts.match.total++\n          invocationCounts.match[key][0]++ // matches for this rule\n\n          if (process.env.DEBUG?.includes('speed')) {\n            console[delta > 5 ? 'warn' : 'log'](\n              `${ruleNames[key] || key}:match`,\n              `${delta.toFixed(3)}ms`,\n              args[0]\n            )\n          }\n        } else if (process.env.DEBUG?.includes('miss')) {\n          console.log(\n            `\\n${ruleNames[key] || key}:miss`,\n            JSON.stringify(args[0])\n          )\n        }\n\n        return result\n      }\n\n      rules[key]._parse = (...args) => {\n        invocationCounts.parse.total++\n        invocationCounts.parse[key][0] += 1\n        const start = performance.now()\n        const result = parse(...args)\n        const delta = performance.now() - start\n\n        invocationCounts.parse[key][1] += delta\n        invocationCounts.parse[key][2] = Math.max(\n          Number(invocationCounts.parse[key][2]) || 0,\n          delta\n        )\n\n        if (process.env.DEBUG?.includes('speed')) {\n          console[delta > 5 ? 'warn' : 'log'](\n            `${ruleNames[key] || key}:parse`,\n            `${delta.toFixed(3)}ms`,\n            args[0]\n          )\n        }\n\n        return result\n      }\n    })\n  }\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter = createRenderer(rules, options.renderRule)\n\n  const jsx = compile(markdown)\n\n  if (isDebug) {\n    // Log invocation counts for debugging with readable rule names and miss ratios\n    const matchCountsWithNames: { [key: string]: any } = {\n      total: invocationCounts.match.total,\n      attempts: invocationCounts.match.attempts,\n      missRatio:\n        invocationCounts.match.attempts > 0\n          ? (\n              ((invocationCounts.match.attempts -\n                invocationCounts.match.total) /\n                invocationCounts.match.attempts) *\n              100\n            ).toFixed(1) + '%'\n          : '0%',\n    }\n\n    const parseCountsWithNames: {\n      [key: string]: { executions: number; cost: number; max: number } | number\n    } = {\n      total: invocationCounts.parse.total,\n    }\n\n    Object.keys(invocationCounts.match).forEach(key => {\n      if (key !== 'total' && key !== 'attempts') {\n        const ruleName = ruleNames[key] || key\n        const [matches, attempts, max] = invocationCounts.match[key]\n        matchCountsWithNames[ruleName] = {\n          matches,\n          attempts,\n          missRatio:\n            attempts > 0\n              ? (((attempts - matches) / attempts) * 100).toFixed(1) + '%'\n              : '0%',\n          max: max.toFixed(3),\n        }\n      }\n    })\n\n    Object.keys(invocationCounts.parse).forEach(key => {\n      if (key !== 'total') {\n        const ruleName = ruleNames[key] || key\n        const [executions, cost, max] = invocationCounts.parse[key]\n        parseCountsWithNames[ruleName] = {\n          executions,\n          cost: cost.toFixed(3),\n          max: max.toFixed(3),\n        }\n      }\n    })\n\n    console.log('Match invocations:', matchCountsWithNames)\n    console.log('Parse invocations:', parseCountsWithNames)\n  }\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={slug(def.identifier, slugify)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children: rawChildren, options, ...props }) => {\n  const children = rawChildren === null || rawChildren === undefined ? '' : rawChildren\n\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an HTML context */\n    inHTML?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.ReactNode\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: (typeof Priority)[keyof typeof Priority]\n    _parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    /**\n     * Optional fast check that can quickly determine if this rule\n     * should even be attempted. Should check the start of the source string\n     * for quick patterns without expensive regex operations.\n     *\n     * @param source The input source string (already trimmed of leading whitespace)\n     * @param state Current parser state\n     * @returns true if the rule should be attempted, false to skip\n     */\n    _qualify?:\n      | string[]\n      | ((source: string, state: MarkdownToJSX.State) => boolean)\n    _render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactNode\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactNode[]\n    ) => React.ReactNode\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactNode,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactNode\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"],
  "mappings": "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",
  "names": ["RuleType", "blockQuote", "breakLine", "breakThematic", "codeBlock", "codeFenced", "codeInline", "footnote", "footnoteReference", "gfmTask", "heading", "headingSetext", "htmlBlock", "htmlComment", "htmlSelfClosing", "image", "link", "linkAngleBraceStyleDetector", "linkBareUrlDetector", "linkMailtoDetector", "newlineCoalescer", "orderedList", "paragraph", "ref", "refImage", "refLink", "table", "tableSeparator", "text", "textBolded", "textEmphasized", "textEscaped", "textMarked", "textStrikethroughed", "unorderedList", "ATTRIBUTE_TO_JSX_PROP_MAP", "reduce", "obj", "x", "toLowerCase", "class", "for", "namedCodesToUnicode", "amp", "apos", "gt", "lt", "nbsp", "quot", "DO_NOT_PROCESS_HTML_ELEMENTS", "ATTRIBUTES_TO_SANITIZE", "ATTR_EXTRACTOR_R", "BLOCK_END_R", "BLOCKQUOTE_R", "BLOCKQUOTE_TRIM_LEFT_MULTILINE_R", "BLOCKQUOTE_ALERT_R", "BREAK_LINE_R", "BREAK_THEMATIC_R", "CODE_BLOCK_FENCED_R", "CODE_BLOCK_R", "CODE_INLINE_R", "CONSECUTIVE_NEWLINE_R", "CR_NEWLINE_R", "FOOTNOTE_R", "FOOTNOTE_REFERENCE_R", "FORMFEED_R", "FRONT_MATTER_R", "GFM_TASK_R", "HEADING_R", "HEADING_ATX_COMPLIANT_R", "HEADING_SETEXT_R", "HTML_BLOCK_ELEMENT_R", "HTML_CHAR_CODE_R", "HTML_COMMENT_R", "HTML_CUSTOM_ATTR_R", "HTML_SELF_CLOSING_ELEMENT_R", "INTERPOLATION_R", "LINK_AUTOLINK_BARE_URL_R", "LINK_AUTOLINK_R", "CAPTURE_LETTER_AFTER_HYPHEN", "NP_TABLE_R", "PARAGRAPH_R", "REFERENCE_IMAGE_OR_LINK", "REFERENCE_IMAGE_R", "REFERENCE_LINK_R", "SHOULD_RENDER_AS_BLOCK_R", "TAB_R", "TABLE_TRIM_PIPES", "TABLE_CENTER_ALIGN", "TABLE_LEFT_ALIGN", "TABLE_RIGHT_ALIGN", "LOOKAHEAD", "double", "INLINE_SKIP_R", "TEXT_BOLD_R", "RegExp", "TEXT_EMPHASIZED_R", "TEXT_MARKED_R", "TEXT_STRIKETHROUGHED_R", "SHORTCODE_R", "TEXT_ESCAPED_R", "UNESCAPE_R", "TEXT_PLAIN_R", "TRIM_STARTING_NEWLINES", "HTML_LEFT_TRIM_AMOUNT_R", "LIST_LOOKBEHIND_R", "ORDERED_LIST_BULLET", "UNORDERED_LIST_BULLET", "generateListItemPrefix", "type", "ORDERED_LIST_ITEM_PREFIX", "UNORDERED_LIST_ITEM_PREFIX", "generateListItemPrefixRegex", "ORDERED_LIST_ITEM_PREFIX_R", "UNORDERED_LIST_ITEM_PREFIX_R", "generateListItemRegex", "ORDERED_LIST_ITEM_R", "UNORDERED_LIST_ITEM_R", "generateListRegex", "bullet", "ORDERED_LIST_R", "UNORDERED_LIST_R", "generateListRule", "h", "ordered", "LIST_R", "LIST_ITEM_R", "LIST_ITEM_PREFIX_R", "_qualify", "source", "test", "_match", "allowInline", "state", "isStartOfLine", "exec", "prevCapture", "list", "inline", "simple", "_order", "_parse", "capture", "parse", "start", "items", "replace", "match", "lastItemWasAParagraph", "map", "item", "i", "space", "length", "spaceRegex", "content", "isLastItem", "thisItemIsAParagraph", "indexOf", "oldStateInline", "oldStateList", "adjustedContent", "trimEnd", "result", "_render", "node", "output", "key", "undefined", "LINK_R", "IMAGE_R", "isString", "value", "str", "end", "slice", "startsWith", "prefix", "qualifies", "qualify", "Array", "isArray", "slugify", "parseTableAlignCapture", "alignCapture", "parseTableRow", "tableOutput", "prevInTable", "inTable", "cells", "acc", "flush", "cell", "push", "apply", "trim", "split", "filter", "Boolean", "forEach", "fragment", "arr", "parseTable", "align", "rowText", "header", "children", "getTableStyle", "colIndex", "textAlign", "fn", "inlineRegex", "regex", "simpleInlineRegex", "blockRegex", "anyScopeRegex", "SANITIZE_R", "sanitizer", "input", "decoded", "decodeURIComponent", "e", "unescape", "rawString", "parseInline", "isCurrentlyInline", "isCurrentlySimple", "parseSimpleInline", "parseBlock", "parseCaptureInline", "captureNothing", "renderNothing", "cx", "args", "join", "get", "src", "path", "fb", "ptr", "frags", "shift", "compiler", "markdown", "options", "overrides", "_extends", "slug", "sanitize", "createElement", "NON_PARAGRAPH_BLOCK_SYNTAXES", "enforceAtxHeadings", "BLOCK_SYNTAXES", "some", "regexes", "tag", "props", "overrideProps", "override", "className", "compile", "forceInline", "forceBlock", "emitter", "parser", "pop", "wrapper", "jsx", "forceWrapper", "attrStringToMap", "attributes", "raw", "delimiterIdx", "_", "letter", "toUpperCase", "first", "mappedKey", "normalizedValue", "sanitizeUrlFn", "styleString", "styles", "buffer", "inUrl", "inQuotes", "quoteChar", "char", "endsWith", "declaration", "colonIndex", "substr", "footnotes", "refs", "rules", "alert", "unshift", "attrs", "noInnerParse", "__", "lang", "identifier", "target", "href", "completed", "checked", "readOnly", "id", "level", "nlIndex", "whitespace", "trimmer", "trimmed", "parseFunc", "tagName", "ast", "inAnchor", "prevInHTML", "inHTML", "alt", "title", "isEmail", "disableAutoLink", "newlineIndex", "line", "captured", "fallbackChildren", "style", "row", "c", "ret", "full", "inner", "disableParsingRawHTML", "ruleList", "Object", "keys", "nestedParse", "ruleType", "rule", "substring", "parsed", "sort", "a", "b", "userRender", "patchedRender", "oldKey", "lastWasString", "nodeOut", "_isString", "render", "renderer", "renderRule", "def", "_ref", "rawChildren", "_excluded", "cloneElement"]
}
